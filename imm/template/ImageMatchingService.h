/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ImageMatchingService_H
#define ImageMatchingService_H

#include <thrift/TDispatchProcessor.h>
#include "service_types.h"



class ImageMatchingServiceIf {
 public:
  virtual ~ImageMatchingServiceIf() {}
  virtual void match_img(std::string& _return, const std::string& img_query) = 0;
  virtual void ping() = 0;
};

class ImageMatchingServiceIfFactory {
 public:
  typedef ImageMatchingServiceIf Handler;

  virtual ~ImageMatchingServiceIfFactory() {}

  virtual ImageMatchingServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ImageMatchingServiceIf* /* handler */) = 0;
};

class ImageMatchingServiceIfSingletonFactory : virtual public ImageMatchingServiceIfFactory {
 public:
  ImageMatchingServiceIfSingletonFactory(const boost::shared_ptr<ImageMatchingServiceIf>& iface) : iface_(iface) {}
  virtual ~ImageMatchingServiceIfSingletonFactory() {}

  virtual ImageMatchingServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ImageMatchingServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<ImageMatchingServiceIf> iface_;
};

class ImageMatchingServiceNull : virtual public ImageMatchingServiceIf {
 public:
  virtual ~ImageMatchingServiceNull() {}
  void match_img(std::string& /* _return */, const std::string& /* img_query */) {
    return;
  }
  void ping() {
    return;
  }
};

typedef struct _ImageMatchingService_match_img_args__isset {
  _ImageMatchingService_match_img_args__isset() : img_query(false) {}
  bool img_query :1;
} _ImageMatchingService_match_img_args__isset;

class ImageMatchingService_match_img_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  ImageMatchingService_match_img_args(const ImageMatchingService_match_img_args&);
  ImageMatchingService_match_img_args& operator=(const ImageMatchingService_match_img_args&);
  ImageMatchingService_match_img_args() : img_query() {
  }

  virtual ~ImageMatchingService_match_img_args() throw();
  std::string img_query;

  _ImageMatchingService_match_img_args__isset __isset;

  void __set_img_query(const std::string& val);

  bool operator == (const ImageMatchingService_match_img_args & rhs) const
  {
    if (!(img_query == rhs.img_query))
      return false;
    return true;
  }
  bool operator != (const ImageMatchingService_match_img_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImageMatchingService_match_img_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ImageMatchingService_match_img_args& obj);
};


class ImageMatchingService_match_img_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~ImageMatchingService_match_img_pargs() throw();
  const std::string* img_query;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ImageMatchingService_match_img_pargs& obj);
};

typedef struct _ImageMatchingService_match_img_result__isset {
  _ImageMatchingService_match_img_result__isset() : success(false) {}
  bool success :1;
} _ImageMatchingService_match_img_result__isset;

class ImageMatchingService_match_img_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  ImageMatchingService_match_img_result(const ImageMatchingService_match_img_result&);
  ImageMatchingService_match_img_result& operator=(const ImageMatchingService_match_img_result&);
  ImageMatchingService_match_img_result() : success() {
  }

  virtual ~ImageMatchingService_match_img_result() throw();
  std::string success;

  _ImageMatchingService_match_img_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const ImageMatchingService_match_img_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ImageMatchingService_match_img_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImageMatchingService_match_img_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ImageMatchingService_match_img_result& obj);
};

typedef struct _ImageMatchingService_match_img_presult__isset {
  _ImageMatchingService_match_img_presult__isset() : success(false) {}
  bool success :1;
} _ImageMatchingService_match_img_presult__isset;

class ImageMatchingService_match_img_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~ImageMatchingService_match_img_presult() throw();
  std::string* success;

  _ImageMatchingService_match_img_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const ImageMatchingService_match_img_presult& obj);
};


class ImageMatchingService_ping_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ImageMatchingService_ping_args(const ImageMatchingService_ping_args&);
  ImageMatchingService_ping_args& operator=(const ImageMatchingService_ping_args&);
  ImageMatchingService_ping_args() {
  }

  virtual ~ImageMatchingService_ping_args() throw();

  bool operator == (const ImageMatchingService_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ImageMatchingService_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImageMatchingService_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ImageMatchingService_ping_args& obj);
};


class ImageMatchingService_ping_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~ImageMatchingService_ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ImageMatchingService_ping_pargs& obj);
};


class ImageMatchingService_ping_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ImageMatchingService_ping_result(const ImageMatchingService_ping_result&);
  ImageMatchingService_ping_result& operator=(const ImageMatchingService_ping_result&);
  ImageMatchingService_ping_result() {
  }

  virtual ~ImageMatchingService_ping_result() throw();

  bool operator == (const ImageMatchingService_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ImageMatchingService_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImageMatchingService_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ImageMatchingService_ping_result& obj);
};


class ImageMatchingService_ping_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~ImageMatchingService_ping_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const ImageMatchingService_ping_presult& obj);
};

class ImageMatchingServiceClient : virtual public ImageMatchingServiceIf {
 public:
  ImageMatchingServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ImageMatchingServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void match_img(std::string& _return, const std::string& img_query);
  void send_match_img(const std::string& img_query);
  void recv_match_img(std::string& _return);
  void ping();
  void send_ping();
  void recv_ping();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ImageMatchingServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ImageMatchingServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ImageMatchingServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_match_img(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ImageMatchingServiceProcessor(boost::shared_ptr<ImageMatchingServiceIf> iface) :
    iface_(iface) {
    processMap_["match_img"] = &ImageMatchingServiceProcessor::process_match_img;
    processMap_["ping"] = &ImageMatchingServiceProcessor::process_ping;
  }

  virtual ~ImageMatchingServiceProcessor() {}
};

class ImageMatchingServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ImageMatchingServiceProcessorFactory(const ::boost::shared_ptr< ImageMatchingServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ImageMatchingServiceIfFactory > handlerFactory_;
};

class ImageMatchingServiceMultiface : virtual public ImageMatchingServiceIf {
 public:
  ImageMatchingServiceMultiface(std::vector<boost::shared_ptr<ImageMatchingServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ImageMatchingServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ImageMatchingServiceIf> > ifaces_;
  ImageMatchingServiceMultiface() {}
  void add(boost::shared_ptr<ImageMatchingServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void match_img(std::string& _return, const std::string& img_query) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->match_img(_return, img_query);
    }
    ifaces_[i]->match_img(_return, img_query);
    return;
  }

  void ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    ifaces_[i]->ping();
  }

};



#endif
